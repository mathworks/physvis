function testHgTransformPerfomance()

% © Copyright 2017 The MathWorks, Inc.

% SETUP

% Create and orient Axes
hAxes = axes('Color', 'k');
view(hAxes, 3);
% Default values describing the boxes
boxesPerEdge = 10;
numBoxes = boxesPerEdge^3;
boxSize = [0.36,0.24,0.36];
positions = (0:boxesPerEdge-1)*(2/3)-((boxesPerEdge-1)/2);
[x, y, z] = meshgrid(positions, positions, positions);
x = x(:);
y = y(:);
z = z(:);
% Default Scale
scaleM = makehgtform('scale', boxSize);
hgT(numBoxes) = hgtransform();
boxes(numBoxes) = patch();
% Create boxes and hgTransforms
for boxIdx = 1:numBoxes
    hgT(boxIdx) = hgtransform('Parent', hAxes);
    boxes(boxIdx) = createBox(hgT(boxIdx), ([x(boxIdx), y(boxIdx), z(boxIdx)]+((boxesPerEdge-1)/2))./((2/3)*boxesPerEdge));
    hgT(boxIdx).Matrix = scaleM;
    hgT(boxIdx).Matrix(1:3, 4) = [x(boxIdx); y(boxIdx); z(boxIdx)];
end

% Rotate the boxes about the 'y' axis
theta = 0;
dtheta = 0.01;
while (theta < pi)
    drawnow('limitrate')
    if(theta == 0)
        previousV = [0,0,1];
    else
        previousV = [sin(theta-dtheta), 0, cos(theta-dtheta)];
    end
    theta = theta + dtheta;
    v = [sin(theta), 0, cos(theta)];
    for idx = 1:numBoxes
        % Calculate new Transformation Matrix:
        %
        % Optimized Method
        prevM = hgT(idx).Matrix;
        rotMat = arbitraryRotation(previousV, v);
        M = prevM * rotMat;
        % Slow method
%         M = hgT(idx).Matrix * makehgtform('yrotate', dtheta);

        % Assign new Transformation Matrix to transform
        hgT(idx).Matrix = M;
    end
end

end

function box = createBox(hgTransformObject, Color)

box = patch( ...
    'Faces', [ ...
    1, 4, 2; ...
    3, 2, 4; ...
    5, 6, 8; ...
    7, 8, 6; ...
    1, 2, 5; ...
    6, 5, 2; ...
    3, 4, 7; ...
    8, 7, 4; ...
    1, 5, 4; ...
    8, 4, 5; ...
    2, 3, 6; ...
    7, 6, 3], ...
    'Vertices', [ ...
    0, 1, 0; ...
    1, 1, 0; ...
    1, 0, 0; ...
    0, 0, 0; ...
    0, 1, 1; ...
    1, 1, 1; ...
    1, 0, 1; ...
    0, 0, 1]-0.5, ...
    'FaceColor', Color, ...
    'FaceLighting', 'flat', ...
    'DiffuseStrength', 0.6, ...
    'SpecularExponent', 50, ...
    'SpecularStrength', 0.001, ...
    'AmbientStrength', 0.5, ...
    'EdgeColor', 'none', ...
    'Parent', hgTransformObject);

end
